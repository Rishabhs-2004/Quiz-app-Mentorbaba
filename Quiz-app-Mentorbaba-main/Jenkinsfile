pipeline {
    agent any
    
    environment {
        DOCKER_HUB_REPO = 'your-dockerhub-username/quiz-app'
        DOCKER_HUB_CREDENTIALS = credentials('dockerhub-credentials')
        AWS_REGION = 'us-east-1'
        EC2_HOST = credentials('ec2-host')
        EC2_USER = 'ubuntu'
        SSH_KEY = credentials('ec2-ssh-key')
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    env.GIT_COMMIT_SHORT = sh(
                        script: "git rev-parse --short HEAD",
                        returnStdout: true
                    ).trim()
                    env.BUILD_VERSION = "${env.BUILD_NUMBER}-${env.GIT_COMMIT_SHORT}"
                }
            }
        }
        
        stage('Test') {
            steps {
                script {
                    sh '''
                        python3 -m venv venv
                        source venv/bin/activate
                        pip install -r requirements.txt
                        python -m pytest tests/ --junitxml=test-results.xml || true
                    '''
                }
            }
            post {
                always {
                    publishTestResults testResultsPattern: 'test-results.xml'
                }
            }
        }
        
        stage('Code Quality') {
            steps {
                sh '''
                    source venv/bin/activate
                    pip install flake8
                    flake8 app.py --max-line-length=120 --ignore=E501 || true
                '''
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    def image = docker.build("${DOCKER_HUB_REPO}:${BUILD_VERSION}")
                    docker.withRegistry('https://registry.hub.docker.com', 'dockerhub-credentials') {
                        image.push()
                        image.push('latest')
                    }
                }
            }
        }
        
        stage('Security Scan') {
            steps {
                script {
                    sh """
                        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                        -v \$(pwd):/tmp/.trivy-cache/ \
                        aquasec/trivy image --exit-code 0 --severity HIGH,CRITICAL \
                        ${DOCKER_HUB_REPO}:${BUILD_VERSION} || true
                    """
                }
            }
        }
        
        stage('Deploy to Staging') {
            steps {
                script {
                    sh """
                        ssh -o StrictHostKeyChecking=no -i ${SSH_KEY} ${EC2_USER}@${EC2_HOST} '
                            docker pull ${DOCKER_HUB_REPO}:${BUILD_VERSION}
                            docker stop quiz-app-staging || true
                            docker rm quiz-app-staging || true
                            docker run -d --name quiz-app-staging -p 5001:5000 ${DOCKER_HUB_REPO}:${BUILD_VERSION}
                        '
                    """
                }
            }
        }
        
        stage('Integration Tests') {
            steps {
                script {
                    sh """
                        sleep 30
                        curl -f http://${EC2_HOST}:5001/health || exit 1
                        echo "Staging deployment successful!"
                    """
                }
            }
        }
        
        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                script {
                    sh """
                        ssh -o StrictHostKeyChecking=no -i ${SSH_KEY} ${EC2_USER}@${EC2_HOST} '
                            docker pull ${DOCKER_HUB_REPO}:${BUILD_VERSION}
                            docker stop quiz-app-prod || true
                            docker rm quiz-app-prod || true
                            docker run -d --name quiz-app-prod -p 80:5000 ${DOCKER_HUB_REPO}:${BUILD_VERSION}
                        '
                    """
                }
            }
        }
        
        stage('Health Check') {
            steps {
                script {
                    sh """
                        sleep 30
                        curl -f http://${EC2_HOST}/health || exit 1
                        echo "Production deployment successful!"
                    """
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            emailext (
                subject: "✅ Pipeline Success: ${env.JOB_NAME} - ${env.BUILD_NUMBER}",
                body: """
                    <h2>Build Successful!</h2>
                    <p><strong>Job:</strong> ${env.JOB_NAME}</p>
                    <p><strong>Build Number:</strong> ${env.BUILD_NUMBER}</p>
                    <p><strong>Version:</strong> ${BUILD_VERSION}</p>
                    <p><strong>Git Commit:</strong> ${env.GIT_COMMIT_SHORT}</p>
                    <p><strong>Production URL:</strong> http://${EC2_HOST}</p>
                """,
                to: "your-email@example.com",
                mimeType: 'text/html'
            )
        }
        failure {
            emailext (
                subject: "❌ Pipeline Failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER}",
                body: """
                    <h2>Build Failed!</h2>
                    <p><strong>Job:</strong> ${env.JOB_NAME}</p>
                    <p><strong>Build Number:</strong> ${env.BUILD_NUMBER}</p>
                    <p><strong>Console Output:</strong> ${env.BUILD_URL}console</p>
                """,
                to: "your-email@example.com",
                mimeType: 'text/html'
            )
        }
    }
}